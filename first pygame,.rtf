{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fmodern JetBrains Mono;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red204\green120\blue50;\red169\green183\blue198;\red104\green151\blue187;\red106\green135\blue89;\red128\green128\blue128;\red136\green136\blue198;\red255\green198\blue109;\red170\green73\blue38;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\box\brdrdash\brdrw0 \sa200\sl276\slmult1\cf1\f0\fs20\lang9 import \cf2 pygame\line\cf1 import \cf2 math\line\line pygame.init()\line\line run = \cf1 True\line\cf2 clock = pygame.time.Clock()\line screen = pygame.display.set_mode((\cf3 1150\cf1 ,\cf3 700\cf2 ))\line pygame.display.set_caption(\cf4 'Dodge This'\cf2 )\line\line\cf5 #organize animations\line\cf2 player_animation = []\line player_idle = []\line player_jump = []\line player_stayjump = []\line player_fallingdown = []\line\line\cf5 #enemy animations\line\cf2 blob = []\line\cf5 #enemy clips\line\cf2 enemy_clips = \cf3 0\line\line\cf1 for \cf2 i \cf1 in \cf6 range \cf2 (\cf3 0\cf1 ,\cf3 8\cf2 ):\line     player_animation.append(pygame.image.load(\cf4 f'animation/alien_run\cf1\{\cf2 i\cf1\}\cf4 .png'\cf2 ).convert_alpha())\line     player_idle.append(pygame.image.load(\cf4 f'animation/alien_run\cf1\{\cf2 i\cf1\}\cf4 .png'\cf2 ).convert_alpha())\line\cf1 for \cf2 i \cf1 in \cf6 range \cf2 (\cf3 0\cf1 ,\cf3 14\cf2 ):\line     player_jump.append(pygame.image.load(\cf4 f'animation/jump/alien_jump0\cf1\{\cf2 i\cf1\}\cf4 .png'\cf2 ).convert_alpha())\line\cf1 for \cf2 i \cf1 in \cf6 range\cf2 (\cf3 0\cf1 ,\cf3 11\cf2 ):\line     player_stayjump.append(pygame.image.load(\cf4 f'animation/stayjump/alien_stay_jump0\cf1\{\cf2 i\cf1\}\cf4 .png'\cf2 ).convert_alpha())\line\cf1 for \cf2 i \cf1 in \cf6 range\cf2 (\cf3 0\cf1 ,\cf3 8\cf2 ):\line     player_fallingdown.append(pygame.image.load(\cf4 f'animation/fallingdown/alien_fallingdown\cf1\{\cf2 i\cf1\}\cf4 .png'\cf2 ).convert_alpha())\line\cf1 for \cf2 i \cf1 in \cf6 range\cf2 (\cf3 0\cf1 ,\cf3 4\cf2 ):\line     blob.append(pygame.image.load(\cf4 f'animation/blob\cf1\{\cf2 i\cf1\}\cf4 .png'\cf2 ).convert_alpha())\line\line first_clip = \cf3 0\line\cf2 first_clipidle = \cf3 0\line\cf2 first_clipjump = \cf3 0\line\cf2 first_clipfalling = \cf3 0\line\cf5 #cooldown and update time\line\cf2 cooldown = \cf3 100\line\cf2 update_time = \cf3 0\line\cf5 #enemy\line\cf2 enemy_cooldown = \cf3 60\line\cf2 enemy_update_time = \cf3 0\line\line\cf5 #starting position\line\cf2 x = \cf3 50\line\cf2 y = \cf3 450\line\cf5 #enemy position\line\cf2 enemy_x = \cf3 1140\line\cf2 enemy_y = \cf3 430\line\line\cf5 #physics\line\cf2 gravity = \cf3 3\line\cf2 jump_gravity = \cf3 4\line\cf2 j = \cf1 False\line\cf5 #player\line\line #text\line\cf2 home = pygame.font.Font(\cf1 None, \cf3 50\cf2 )\line score = pygame.font.Font(\cf1 None, \cf3 50\cf2 )\line play = \cf1 False\line\cf2 start = \cf1 False\line\cf2 game_over = \cf1 False\line\cf2 counter = \cf3 0\line\line\cf1 def \cf7 idle\cf2 ():\line     \cf1 global \cf2 j\cf1 , \cf2 update_time\cf1 , \cf2 first_clip\cf1 , \cf2 player_animation\cf1 , \cf2 player_fallingdown\cf1 , \cf2 first_clipfalling\cf1 , \cf2 first_clipidle\cf1 , \cf2 first_clipjump\cf1 , \cf2 y\cf1 , \cf2 gravity\cf1 , \cf2 jump_gravity\line     \cf1 if not \cf2 key[pygame.K_SPACE] \cf1 and \cf2 j == \cf1 False\cf2 :\line         player_animation = player_idle\line         first_clipfalling = \cf3 0\line         \cf2 first_clip = first_clipidle\line         first_clipjump = \cf3 0\line         \cf1 if \cf2 pygame.time.get_ticks()-update_time > cooldown:\line             first_clipidle += \cf3 1\line             \cf2 update_time = pygame.time.get_ticks()\line             \cf1 if \cf2 first_clipidle == \cf3 7\cf2 :\line                 first_clipidle = \cf3 0\line\line     \cf1 elif not \cf2 key[pygame.K_SPACE] \cf1 and \cf2 j == \cf1 True\cf2 :\line         player_animation = player_fallingdown\line         first_clip = first_clipfalling\line         first_clipidle = \cf3 0\line         \cf2 y += gravity\line         \cf1 if \cf2 pygame.time.get_ticks() - update_time > cooldown:\line             first_clipfalling += \cf3 1\line             \cf2 update_time = pygame.time.get_ticks()\line         \cf1 if \cf2 first_clipfalling == \cf3 7\cf2 :\line             first_clipfalling = \cf3 5\line         \cf1 if \cf2 y >= \cf3 450\cf2 :\line             j = \cf1 False\line             \cf2 y = \cf3 450\line\line\cf1 def \cf7 jump\cf2 ():\line     \cf1 global \cf2 current_animation\cf1 , \cf2 update_time\cf1 , \cf2 first_clip\cf1 , \cf2 player_animation\cf1 , \cf2 player_stayjump\cf1 , \cf2 j\cf1 , \cf2 first_clipjump\cf1 , \cf2 y\cf1 , \cf2 jump_gravity\cf1 , \cf2 first_clipidle\cf1 , \cf2 first_clipfalling\line     \cf1 if \cf2 key[pygame.K_SPACE]:\line         j = \cf1 True\line         \cf2 player_animation = player_jump + player_stayjump\line         first_clip = first_clipjump\line         y -= jump_gravity\line         \cf1 if \cf2 j == \cf1 True\cf2 :\line             \cf1 if \cf2 pygame.time.get_ticks()-update_time > cooldown:\line                 first_clipjump += \cf3 1\line                 \cf2 update_time = pygame.time.get_ticks()\line             \cf1 if \cf2 first_clipjump == \cf3 23\cf2 :\line                 first_clipjump = \cf3 14\line\line\cf1 def \cf7 enemy\cf2 ():\line     \cf1 global \cf2 enemy_update_time\cf1 , \cf2 enemy_clips\cf1 , \cf2 enemy_x\cf1 , \cf2 enemy_cooldown\cf1 , \cf2 counter\line     enemy_x -=\cf3 7\line     \cf1 if \cf2 enemy_x < -\cf3 150\cf2 :\line         enemy_x = \cf3 1200\line         \cf2 counter +=\cf3 1\line     \cf1 if \cf2 pygame.time.get_ticks() - enemy_update_time > enemy_cooldown:\line         enemy_clips += \cf3 1\line         \cf2 enemy_update_time = pygame.time.get_ticks()\line     \cf1 if \cf2 enemy_clips == \cf3 3\cf2 :\line         enemy_clips = \cf3 0\line\line\cf1 while \cf2 run:\line     clock.tick(\cf3 60\cf2 )\line     screen.fill(\cf4 'white'\cf2 )\line     \cf1 if not \cf2 play \cf1 and not \cf2 start:\line         key = pygame.key.get_pressed()\line         home_surf = home.render(\cf4 'Ready? Press Space to play.'\cf1 , False, \cf4 'Black'\cf2 )\line         screen.blit(home_surf\cf1 , \cf2 (\cf3 360\cf1 , \cf3 300\cf2 ))\line         \cf1 if \cf2 key[pygame.K_SPACE]:\line             play = \cf1 True\line             \cf2 start = \cf1 True\line     elif \cf2 play:\line         \cf5 #initialize key\line         \cf2 key = pygame.key.get_pressed()\line         \cf5 #player\line         \cf2 current_animation = player_animation[first_clip]\line         idle()\line         jump()\line         \cf5 #rectangle\line         \cf2 anim_rect = current_animation.get_rect(\cf8 center \cf2 = (x\cf1 , \cf2 y))\line         \cf5 #enemy\line         \cf2 enemy_animation = blob[enemy_clips]\line         enemy_rect = enemy_animation.get_rect(\cf8 center \cf2 = (enemy_x\cf1 , \cf2 enemy_y))\line         enemy()\line         \cf5 #screen display\line         \cf2 screen.blit(current_animation\cf1 , \cf2 anim_rect)\line         screen.blit(enemy_animation\cf1 , \cf2 enemy_rect)\line         \cf5 #score\line         \cf2 score_surf = score.render(\cf4 f'\cf1\{\cf2 counter\cf1\}\cf4 '\cf1 , False, \cf4 'Black'\cf2 )\line         screen.blit(score_surf\cf1 , \cf2 (\cf3 435\cf1 , \cf3 50\cf2 ))\line         \cf1 if \cf2 anim_rect.colliderect(enemy_rect):\line             play = \cf1 False\line     elif not \cf2 play \cf1 and \cf2 start:\line         key = pygame.key.get_pressed()\line         home_surf = home.render(\cf4 'Game over.'\cf1 , False, \cf4 'Black'\cf2 )\line         screen.blit(home_surf\cf1 , \cf2 (\cf3 575\cf1 , \cf3 350\cf2 ))\line         \cf1 if \cf2 key[pygame.K_RETURN]:\line             enemy_x = \cf3 1140\line             \cf2 start = \cf1 False\line             \cf2 counter = \cf3 0\line\line\line     \cf1 for \cf2 event \cf1 in \cf2 pygame.event.get():\line         \cf1 if \cf2 event.type == pygame.QUIT:\line             run = \cf1 False\line     \cf2 pygame.display.update()\line\line pygame.quit()\line\par

\pard\sa200\sl276\slmult1\cf0\f1\fs22\par
}
 